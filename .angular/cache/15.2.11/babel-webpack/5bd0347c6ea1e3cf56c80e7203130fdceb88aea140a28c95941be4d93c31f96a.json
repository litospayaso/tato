{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/AngelHita/Documents/tato/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Stockfish } from '@classes/stockfish';\nimport { PromotionModalComponent } from '@components/promotion-modal/promotion-modal.component';\nimport * as uuid from 'uuid';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"@services/games.service\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@ionic/storage\";\nimport * as i5 from \"@pipes/translate.pipe\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@components/moves-table/moves-table.component\";\nimport * as i8 from \"@pipes/percentage.pipe\";\nfunction AnalysisPage_button_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 15);\n    i0.ɵɵlistener(\"click\", function AnalysisPage_button_22_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1.getPgn());\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"async\");\n    i0.ɵɵpipe(3, \"translate\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, i0.ɵɵpipeBind1(3, 3, \"getPng\")));\n  }\n}\nexport let AnalysisPage = /*#__PURE__*/(() => {\n  class AnalysisPage {\n    constructor(route, gamesService, popoverController, toastController, storage, translate) {\n      this.route = route;\n      this.gamesService = gamesService;\n      this.popoverController = popoverController;\n      this.toastController = toastController;\n      this.storage = storage;\n      this.translate = translate;\n      this.algebraicMoves = [];\n      this.stockfish = new Stockfish(20, 9, 3);\n      this.userColor = 'w';\n      this.turn = 'w';\n      this.boardMovesPointer = undefined;\n      this.boardId = uuid.v4();\n      this.translate.transform('copied').then(successMessage => this.successMessage = successMessage);\n      this.game = new Chess();\n      this.moves = '';\n      this.stockfish.emmiter = this.stockfishEmmiter.bind(this);\n      document.onkeydown = this.handleKeyPress.bind(this);\n      this.route.params.subscribe(params => {\n        const id = params.id;\n        if (id) {\n          if (gamesService.getGameById(id)) {\n            const game = gamesService.getGameById(id);\n            this.savedGame = game;\n            this.moves = game.movesVerbose;\n            this.boardMovesPointer = 0;\n            this.userColor = game.userColor;\n            if (this.board) {\n              this.board.set({\n                orientation: this.userColor === 'w' ? 'white' : 'black'\n              });\n            }\n          }\n        }\n      });\n    }\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this.createNewGame();\n      }, 200);\n    }\n    createNewGame() {\n      this.game = new Chess();\n      this.board = Chessground(document.getElementById(this.boardId), {\n        orientation: this.userColor === 'w' ? 'white' : 'black',\n        movable: {\n          color: 'white',\n          free: false,\n          dests: this.toDests()\n        },\n        draggable: {\n          showGhost: true\n        }\n      });\n      this.board.set({\n        movable: {\n          events: {\n            after: this.makeAMove()\n          }\n        }\n      });\n    }\n    toDests() {\n      const dests = new Map();\n      this.game.SQUARES.forEach(s => {\n        const ms = this.game.moves({\n          square: s,\n          verbose: true\n        });\n        if (ms.length) {\n          dests.set(s, ms.map(m => m.to));\n        }\n      });\n      return dests;\n    }\n    makeAMove() {\n      var _this = this;\n      return /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (orig, dest) {\n          let move = `${orig}${dest}`;\n          const origPiece = _this.game.get(orig);\n          if (origPiece.type === 'p' && (origPiece.color === 'w' && dest.includes('8') || origPiece.color === 'b' && dest.includes('1'))) {\n            const popover = yield _this.popoverController.create({\n              component: PromotionModalComponent,\n              componentProps: {\n                color: `modal-color-${origPiece.color}`\n              },\n              translucent: false\n            });\n            yield popover.present();\n            const promotion = yield popover.onDidDismiss();\n            yield popover.present();\n            move = move.concat(promotion.data);\n          }\n          // tslint:disable-next-line:max-line-length\n          const moves = _this.boardMovesPointer ? _this.getCurrentListMoves().slice(0, _this.boardMovesPointer).join(' ').concat(` ${move}`) : _this.moves.concat(` ${move}`);\n          _this.boardMovesPointer = undefined;\n          _this.game.move(move, {\n            sloppy: true\n          });\n          _this.moves = _this.game.history({\n            verbose: true\n          }).map(e => `${e.from}${e.to}${e.promotion ? e.promotion : ''}`).join(' ');\n          _this.turn = _this.game.turn();\n          _this.stockfish.evalPosition(moves);\n          _this.algebraicMoves = _this.game.history();\n          _this.board.set({\n            fen: _this.game.fen(),\n            turnColor: _this.toColor(),\n            movable: {\n              color: _this.toColor(),\n              dests: _this.toDests()\n            }\n          });\n        });\n        return function (_x, _x2) {\n          return _ref.apply(this, arguments);\n        };\n      }();\n    }\n    toColor() {\n      return this.game.turn() === 'w' ? 'white' : 'black';\n    }\n    handleKeyPress(event) {\n      switch (event.code) {\n        case 'ArrowLeft':\n          this.moveBackward();\n          break;\n        case 'ArrowRight':\n          this.moveForward();\n          break;\n        default:\n          break;\n      }\n    }\n    stockfishEmmiter(event) {\n      if (event === 'multipv') {\n        if (this.stockfish.lines[0] && this.stockfish.lines[0].moves) this.drawLine(this.stockfish.lines[0].moves[0]);\n      }\n    }\n    drawLine(line) {\n      const match = line.match(/^([a-h][1-8])([a-h][1-8])/);\n      this.board.set({\n        drawable: {\n          shapes: []\n        }\n      });\n      this.board.set({\n        drawable: {\n          shapes: [{\n            orig: match[1],\n            dest: match[2],\n            brush: 'blue'\n          }]\n        }\n      });\n    }\n    getCurrentListMoves() {\n      return this.moves.trim().split(' ').filter(e => e !== '');\n    }\n    moveForward() {\n      if (this.boardMovesPointer >= 0 && this.boardMovesPointer < this.getCurrentListMoves().length) {\n        this.boardMovesPointer = this.boardMovesPointer + 1;\n        this.setPosition();\n      }\n    }\n    moveBackward() {\n      if (this.getCurrentListMoves().length > 0 && this.boardMovesPointer !== 0) {\n        this.boardMovesPointer = this.boardMovesPointer ? this.boardMovesPointer - 1 : this.getCurrentListMoves().length - 1;\n        this.setPosition();\n      }\n    }\n    setPosition() {\n      const moves = this.getCurrentListMoves().slice(0, this.boardMovesPointer).join(' ');\n      this.game.load_pgn(moves, {\n        sloppy: true\n      });\n      this.turn = this.game.turn();\n      this.stockfish.evalPosition(moves);\n      this.algebraicMoves = this.game.history();\n      this.board.set({\n        fen: this.game.fen(),\n        turnColor: this.toColor(),\n        movable: {\n          color: this.toColor(),\n          dests: this.toDests()\n        }\n      });\n    }\n    getPgn() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        const dummy = document.createElement('textarea');\n        document.body.appendChild(dummy);\n        dummy.value = _this2.savedGame.pgn;\n        dummy.select();\n        document.execCommand('copy');\n        document.body.removeChild(dummy);\n        const toast = yield _this2.toastController.create({\n          header: _this2.successMessage,\n          duration: 1000\n        });\n        yield toast.present();\n      })();\n    }\n    static #_ = this.ɵfac = function AnalysisPage_Factory(t) {\n      return new (t || AnalysisPage)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.GamesService), i0.ɵɵdirectiveInject(i3.PopoverController), i0.ɵɵdirectiveInject(i3.ToastController), i0.ɵɵdirectiveInject(i4.Storage), i0.ɵɵdirectiveInject(i5.TranslatePipe));\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AnalysisPage,\n      selectors: [[\"app-analysis\"]],\n      decls: 26,\n      vars: 21,\n      consts: [[3, \"fullscreen\"], [1, \"title-bar\"], [1, \"title-bar-text\"], [1, \"title-bar-controls\"], [\"aria-label\", \"Minimize\"], [\"aria-label\", \"Maximize\"], [\"aria-label\", \"Close\"], [1, \"panel-container\"], [1, \"board-container\"], [1, \"evaluation-bar\"], [1, \"evaluation-string\"], [1, \"evaluation-value\"], [1, \"board-container-element\"], [3, \"id\"], [1, \"control-buttons-container\"], [\"color\", \"medium\", 1, \"windows-button\", \"button-control-element\", 3, \"click\"], [\"name\", \"chevron-back-outline\"], [\"class\", \"windows-button button-control-element\", \"color\", \"medium\", 3, \"click\", 4, \"ngIf\"], [\"name\", \"chevron-forward-outline\"], [1, \"panel-element\", 3, \"lines\", \"moves\", \"game\", \"savedGame\"]],\n      template: function AnalysisPage_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"ion-content\", 0)(1, \"div\", 1)(2, \"div\", 2);\n          i0.ɵɵtext(3);\n          i0.ɵɵpipe(4, \"async\");\n          i0.ɵɵpipe(5, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(6, \"div\", 3);\n          i0.ɵɵelement(7, \"button\", 4)(8, \"button\", 5)(9, \"button\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 7)(11, \"div\", 8)(12, \"div\", 9)(13, \"div\", 10);\n          i0.ɵɵtext(14);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(15, \"div\", 11);\n          i0.ɵɵpipe(16, \"percentage\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 12);\n          i0.ɵɵelement(18, \"div\", 13);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"div\", 14)(20, \"button\", 15);\n          i0.ɵɵlistener(\"click\", function AnalysisPage_Template_button_click_20_listener() {\n            return ctx.moveBackward();\n          });\n          i0.ɵɵelement(21, \"ion-icon\", 16);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(22, AnalysisPage_button_22_Template, 4, 5, \"button\", 17);\n          i0.ɵɵelementStart(23, \"button\", 15);\n          i0.ɵɵlistener(\"click\", function AnalysisPage_Template_button_click_23_listener() {\n            return ctx.moveForward();\n          });\n          i0.ɵɵelement(24, \"ion-icon\", 18);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelement(25, \"app-moves-table\", 19);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"fullscreen\", true);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(4, 15, i0.ɵɵpipeBind1(5, 17, \"analysis\")));\n          i0.ɵɵadvance(10);\n          i0.ɵɵstyleProp(\"color\", ctx.stockfish.evaluation < -3 ? \"white\" : \"#5d5d5d\");\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate(ctx.stockfish.evaluation);\n          i0.ɵɵadvance(1);\n          i0.ɵɵstyleProp(\"width\", i0.ɵɵpipeBind1(16, 19, ctx.stockfish.evaluation), \"%\")(\"color\", ctx.stockfish.evaluation < -2 ? \"white\" : \"#5d5d5d\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"id\", ctx.boardId);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"ngIf\", ctx.savedGame);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"lines\", ctx.stockfish.lines)(\"moves\", ctx.algebraicMoves)(\"game\", ctx.game)(\"savedGame\", ctx.savedGame);\n        }\n      },\n      dependencies: [i6.NgIf, i3.IonContent, i3.IonIcon, i7.MovesTableComponent, i6.AsyncPipe, i5.TranslatePipe, i8.PercentagePipe],\n      styles: [\"#container[_ngcontent-%COMP%]{text-align:center;position:absolute;left:0;right:0;top:50%;transform:translateY(-50%)}#container[_ngcontent-%COMP%]   strong[_ngcontent-%COMP%]{font-size:20px;line-height:26px}#container[_ngcontent-%COMP%]   p[_ngcontent-%COMP%]{font-size:16px;line-height:22px;color:#8c8c8c;margin:0}#container[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]{text-decoration:none}.title-bar[_ngcontent-%COMP%]{background:linear-gradient(90deg,#000080,#1084d0);padding:3px 6px;display:flex;justify-content:space-between;align-items:center;margin:0 13px;position:relative;top:5px}.title-bar[_ngcontent-%COMP%]   .title-bar-text[_ngcontent-%COMP%]{color:#fff;font-weight:700;font-size:12px;margin-right:24px}.title-bar[_ngcontent-%COMP%]   .title-bar-controls[_ngcontent-%COMP%]{display:flex}.title-bar[_ngcontent-%COMP%]   .title-bar-controls[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{width:16px;height:14px;border:none;background-color:silver;margin-left:2px;position:relative;box-shadow:inset -1px -1px #0a0a0a,inset 1px 1px #fff,inset -2px -2px gray,inset 2px 2px #dfdfdf}.panel-container[_ngcontent-%COMP%]{display:flex;flex-direction:row;flex-wrap:wrap;background-color:silver;border:2px solid #dfdfdf;border-bottom-color:#404040;border-right-color:#404040;box-shadow:inset 1px 1px #dfdfdf,1px 0 #000,0 1px #000,1px 1px #000;margin:-24px 10px 10px;padding:36px 10px 10px}@media (max-width: 660px){.panel-container[_ngcontent-%COMP%]{flex-direction:column}}.panel-container[_ngcontent-%COMP%]   .board-container[_ngcontent-%COMP%]{display:flex;flex-direction:column;margin:10px}@media (max-width: 660px){.panel-container[_ngcontent-%COMP%]   .board-container[_ngcontent-%COMP%]{width:100vmin;height:100vmin;margin:0 0 85px}}.panel-container[_ngcontent-%COMP%]   .board-container-element[_ngcontent-%COMP%]{width:55vmin;height:55vmin}@media (max-width: 660px){.panel-container[_ngcontent-%COMP%]   .board-container-element[_ngcontent-%COMP%]{width:calc(100vmin - 52px);height:calc(100vmin - 52px);margin:0 0 30px}}.panel-container[_ngcontent-%COMP%]   .panel-element[_ngcontent-%COMP%]{width:calc(100vw - 55vmin - 140px);margin:20px 0 0 20px;overflow-y:auto;max-height:calc(100vh - 135px)}@media (max-width: 660px){.panel-container[_ngcontent-%COMP%]   .panel-element[_ngcontent-%COMP%]{width:100%;padding:0 10px;max-height:calc(100vh - 100vmin - 205px);overflow-y:auto;margin:unset}}.evaluation-bar[_ngcontent-%COMP%]{height:30px;width:100%;margin-bottom:8px;background-color:#5d5d5d;border:2px solid #dfdfdf;border-top-color:gray;border-left-color:gray}@media (max-width: 660px){.evaluation-bar[_ngcontent-%COMP%]{width:calc(100% - 52px)}}.evaluation-bar[_ngcontent-%COMP%]   .evaluation-value[_ngcontent-%COMP%]{height:25px;background-color:#f4f5f8;transition:width .5s ease-in-out}.evaluation-bar[_ngcontent-%COMP%]   .evaluation-string[_ngcontent-%COMP%]{color:#fff;position:absolute;left:38px;top:51px}@media (max-width: 660px){.evaluation-bar[_ngcontent-%COMP%]   .evaluation-string[_ngcontent-%COMP%]{left:28px;top:42px}}.board.check-w[_ngcontent-%COMP%]   img[data-piece=wK][_ngcontent-%COMP%], .board.check-b[_ngcontent-%COMP%]   img[data-piece=bK][_ngcontent-%COMP%]{box-shadow:inset 0 0 10px red}.board[_ngcontent-%COMP%]   .start-move[_ngcontent-%COMP%]{background-color:#f2cd67}.board[_ngcontent-%COMP%]   .end-move[_ngcontent-%COMP%]{cursor:pointer}.board[_ngcontent-%COMP%]   .end-move[_ngcontent-%COMP%]   img[_ngcontent-%COMP%]{border:solid 3px #786d5a;border-radius:50%}.board[_ngcontent-%COMP%]   .end-move[_ngcontent-%COMP%]:after{content:\\\"\\\";display:inline;height:25%;width:25%;position:relative;top:38%;left:38%;opacity:.5;border-radius:50%;background-color:#000!important;display:block}.control-buttons-container[_ngcontent-%COMP%]{margin-top:20px;display:flex;flex-direction:row;gap:4px}@media (max-width: 660px){.control-buttons-container[_ngcontent-%COMP%]{width:calc(100% - 52px)}}.control-buttons-container[_ngcontent-%COMP%]   .button-control-element[_ngcontent-%COMP%]{width:100%}\"]\n    });\n  }\n  return AnalysisPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}